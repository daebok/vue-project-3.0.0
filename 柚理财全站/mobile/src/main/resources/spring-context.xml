<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util" 
    xmlns:task="http://www.springframework.org/schema/task" 
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/cache
     	http://www.springframework.org/schema/cache/spring-cache.xsd
     	http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:config.properties" />
	
   <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"  scope="prototype">
	    <property name="patterns">
	        <list>
	            <value>com.rd.ifaes.*.*.service.*</value>
	            <value>com.rd.ifaes.*.*.mapper.*</value>
	        </list>
	    </property>
	</bean>

	<aop:config>
	    <aop:advisor advice-ref="druid-stat-interceptor"  pointcut-ref="druid-stat-pointcut" />
	</aop:config>

	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.rd.ifaes"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
 	<!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.rd.ifaes.*.*.domain"/>
        <property name="mapperLocations" value="classpath*:/mappers/**/*.xml"/>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
    </bean>
    
    <!-- 扫描 com.rd.ifaes.core.*.mapper包下的所有接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.rd.ifaes.*.*.mapper" />
    </bean>
    
    <!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!-- MyBatis end -->
    
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
    
    <!-- druid 监控 -->
    <bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">  
		    <property name="slowSqlMillis" value="5000" />
		    <property name="logSlowSql" value="true" />
    </bean>  
    <!-- druid 监控 ： SQL防火墙-->
	<bean id="wallFilter" class="com.alibaba.druid.wall.WallFilter">  
        <property name="config" ref="wallConfig" />  
    </bean>  
    <bean id="wallConfig" class="com.alibaba.druid.wall.WallConfig">  
        <!-- 批量提交 -->
        <property name="multiStatementAllow" value="true" />  
    </bean>
     <!--  <bean id="configFilter" class="com.rd.ifaes.common.util.druid.RdConfigFilter" />  -->  
     
	<!-- 数据源配置, 使用 Druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
       <!-- 
              <property name="connectionProperties" value="druid.config.file=classpath:db.properties;config.decrypt=true;config.decrypt.key=${druid.publicKey}" />
        -->
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 超过时间限制是否回收 -->  
		<property name="removeAbandoned" value="true" />  
		<!-- 超时时间；单位为秒：30 -->  
		<property name="removeAbandonedTimeout" value="30" />  
		<!-- 关闭abanded连接时输出错误日志 -->  
		<property name="logAbandoned" value="true" />  
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <property name="proxyFilters">  
                <list>  
                <!--   <ref bean="configFilter" />   -->  
                    <ref bean="statFilter" />  
                    <ref bean="wallFilter"/>  
                </list>  
       </property> 
	</bean>
	
	<import resource="spring-context-shiro.xml"/>
	<import resource="spring-context-jedis.xml"/>
	<import resource="spring-context-rabbitmq.xml"/>
		
	<!-- dubbo 消费方配置 -->
	<import resource="spring-context-consumer.xml"/>
	
</beans>