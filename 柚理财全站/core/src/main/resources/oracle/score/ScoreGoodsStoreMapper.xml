<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rd.ifaes.core.score.mapper.ScoreGoodsStoreMapper">
	<resultMap type="com.rd.ifaes.core.score.domain.ScoreGoodsStore" id="scoreGoodsStoreResultMap">
		<result property="uuid" column="UUID"/>
		<result property="goodsId" column="USER_ID"/>
		<result property="store" column="TOTAL_SCORE"/>
		<result property="freezeStore" column="USE_SCORE"/>
		<result property="soldAmount" column="NO_USE_SCORE"/>
	</resultMap>
	
	<sql id="table_columns">
		UUID,
		GOODS_ID,
		STORE,
		FREEZE_STORE,
		SOLD_AMOUNT
    </sql>
	<sql id="entity_properties">
		#{uuid},
		#{goodsId},
		#{store},
		#{freezeStore},
		#{soldAmount}
	</sql>

    <!-- 使用like用法：columnName like '%'||#{columnName}||'%' -->
    <sql id="page_where">
        <trim prefix="where" prefixOverrides="and | or ">
            <if test="uuid != null and uuid != ''">and UUID = #{uuid}</if>
            <if test="keywords != null and keywords != ''">and goods.goods_name like '%'||#{keywords}||'%' </if>
        </trim>
        <if test="page != null and page.sort!=null and page.sort!=''">
        	order by ${page.sort} ${page.order}
        </if>
        <if test="page == null or page.sort == null or page.sort == ''">
        	order by sgs.store DESC
        </if>
    </sql>

	<insert id="insert" parameterType="com.rd.ifaes.core.score.domain.ScoreGoodsStore">
		insert into score_goods_store( <include refid="table_columns" /> ) 
		values ( <include refid="entity_properties" /> )
	</insert>
	
	<insert id="insertBatch" parameterType="java.util.List">	
		BEGIN	
		<foreach collection="list" item="item" index="index" separator=";">  
		insert into score_goods_store( <include refid="table_columns" /> ) 
		values 
		( 
			#{item.uuid},
			#{item.goodsId},
			#{item.store},
			#{item.freezeStore},
			#{item.soldAmount}
		)
		</foreach>
		; END ;
	</insert>

	<delete id="delete" parameterType="String">
		delete from score_goods_store
		where uuid = #{uuid}
	</delete>
	
	<delete id="deleteBatch">
		delete from score_goods_store 
		where uuid in
		<foreach collection="array" item="id" open="(" separator="," close=")">  
            #{id} 
        </foreach>		
	</delete>

	<update id="update" parameterType="com.rd.ifaes.core.score.domain.ScoreGoodsStore">
		update score_goods_store 
		<trim prefix="set" suffixOverrides=",">
			<if test="uuid !=null and uuid !='' ">UUID = #{uuid}, </if>
			<if test="goodsId !=null and goodsId !='' ">GOODS_ID = #{goodsId}, </if>
			<if test="store !=null and store !='' ">STORE = #{store}, </if>
			<if test="freezeStore !=null and freezeStore !='' ">FREEZE_STORE = #{freezeStore} </if>
			<if test="soldAmount !=null and soldAmount !='' ">SOLD_AMOUNT = #{soldAmount} </if>
		</trim>
		<where>uuid = #{uuid}</where>
	</update>

    <select id="findAll" resultMap="scoreGoodsStoreResultMap">
        select <include refid="table_columns" />
        from score_goods_store
    </select>
    
    <select id="findList" resultMap="scoreGoodsStoreResultMap">
        select 
        	sgs.UUID,
			sgs.GOODS_ID,
			sgs.STORE,
			sgs.FREEZE_STORE,
			sgs.SOLD_AMOUNT,
			goods.goods_name goodsName
        from 
        	score_goods_store sgs 
        inner join 
        	score_goods goods 
        on 
        	sgs.goods_id = goods.uuid 
        <include refid="page_where" />
    </select>


    <select id="getCount" resultType="int" >
        select count(uuid) from score_goods_store
        <include refid="page_where" />
    </select>


    <select id="get" resultMap="scoreGoodsStoreResultMap" parameterType="String" >
		select 
        	sgs.UUID,
			sgs.GOODS_ID,
			sgs.STORE,
			sgs.FREEZE_STORE,
			sgs.SOLD_AMOUNT,
			goods.goods_name goodsName
        from 
        	score_goods_store sgs 
        inner join 
        	score_goods goods 
        on 
        	sgs.goods_id = goods.uuid 
		where 
			sgs.uuid = #{id}
	</select>
	
	<!-- 其他自定义SQL -->
	<update id="updateGoodsStore" parameterType="com.rd.ifaes.core.score.domain.ScoreGoodsStore" >
		update score_goods_store set freeze_store = freeze_store + #{freezeStore},
				sold_amount = sold_amount + #{soldAmount}
		where  goods_id = #{goodsId}
	</update>
	
	<select id="findStoreByGoodsId" resultMap="scoreGoodsStoreResultMap">
        select 
        	sgs.UUID,
			sgs.GOODS_ID,
			sgs.STORE,
			sgs.FREEZE_STORE,
			sgs.SOLD_AMOUNT,
			goods.goods_name goodsName
        from 
        	score_goods_store sgs 
        inner join 
        	score_goods goods 
        on 
        	sgs.goods_id = goods.uuid 
        where
        	sgs.GOODS_ID = #{scoreGoodsId}
    </select>

	<update id="updateGoodStoreTotal">
		update score_goods_store set store = #{store} where goods_id = #{goodsId}
	</update>
</mapper>