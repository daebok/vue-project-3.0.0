<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rd.ifaes.core.risk.mapper.LevelConfigMapper">
	<resultMap type="com.rd.ifaes.core.risk.domain.LevelConfig" id="levelConfigResultMap">
		<result property="uuid" column="UUID"/>
		<result property="riskLevelNo" column="RISK_LEVEL_NO"/>
		<result property="riskLevelName" column="RISK_LEVEL_NAME"/>
		<result property="riskLevelVal" column="RISK_LEVEL_VAL"/>
		<result property="riskLevelDesc" column="RISK_LEVEL_DESC"/>
		<result property="userRiskLevelName" column="USER_RISK_LEVEL_NAME"/>
		<result property="userRiskLevelVal" column="USER_RISK_LEVEL_VAL"/>
		<result property="userRiskLevelDesc" column="USER_RISK_LEVEL_DESC"/>
		<result property="sort" column="SORT"/>
		<result property="deleteFlag" column="DELETE_FLAG"/>
		<result property="createTime" column="CREATE_TIME"/>
	</resultMap>
	
	<sql id="table_columns">
		UUID,
		RISK_LEVEL_NO,
		RISK_LEVEL_NAME,
		RISK_LEVEL_VAL,
		RISK_LEVEL_DESC,
		USER_RISK_LEVEL_NAME,
		USER_RISK_LEVEL_VAL,
		USER_RISK_LEVEL_DESC,
		SORT,
		DELETE_FLAG,
		CREATE_TIME
    </sql>
	<sql id="entity_properties">
		#{uuid},
		#{riskLevelNo},
		#{riskLevelName},
		#{riskLevelVal},
		#{riskLevelDesc},
		#{userRiskLevelName},
		#{userRiskLevelVal},
		#{userRiskLevelDesc},
		#{sort},
		#{deleteFlag},
		#{createTime}
	</sql>

    <!-- 使用like用法：columnName like '%'||#{columnName}||'%' -->
    <sql id="page_where">
        <trim prefix="where" prefixOverrides="and | or ">
            <if test="uuid != null and uuid != ''">and UUID = #{uuid}</if>
            <if test="riskLevelNo != null and riskLevelNo != ''">and RISK_LEVEL_NO = #{riskLevelNo}</if>
            <if test="riskLevelName != null and riskLevelName != ''">and RISK_LEVEL_NAME like '%'||#{keywords}||'%'</if>
			<if test="riskLevelVal != null">and RISK_LEVEL_VAL = #{riskLevelVal}</if>
            <if test="riskLevelDesc != null and riskLevelDesc != ''">and RISK_LEVEL_DESC = #{riskLevelDesc}</if>
            <if test="userRiskLevelName != null and userRiskLevelName != ''">and USER_RISK_LEVEL_NAME = #{userRiskLevelName}</if>
			<if test="userRiskLevelVal != null">and USER_RISK_LEVEL_VAL = #{userRiskLevelVal}</if>
            <if test="userRiskLevelDesc != null and userRiskLevelDesc != ''">and USER_RISK_LEVEL_DESC = #{userRiskLevelDesc}</if>
			<if test="sort != null">and SORT = #{sort}</if>
			<if test="deleteFlag != null">and DELETE_FLAG = #{deleteFlag}</if>
			<if test="createTime != null">and CREATE_TIME = #{createTime}</if>
        </trim>
        <if test="page != null and page.sort!=null and page.sort!=''">
        	order by ${page.sort} ${page.order}
        </if>
        <if test="page == null or page.sort == null or page.sort == ''">order by  risk_level_val ASC </if> 
    </sql>

	<insert id="insert" parameterType="com.rd.ifaes.core.risk.domain.LevelConfig">
		insert into risk_level_config( <include refid="table_columns" /> ) 
		values ( <include refid="entity_properties" /> )
	</insert>
	
	<insert id="insertBatch" parameterType="java.util.List">		
		BEGIN
		<foreach collection="list" item="item" index="index" separator=";">  
		insert into risk_level_config( <include refid="table_columns" /> ) 
		values 
		( 
		#{item.uuid},
				#{item.riskLevelNo},
				#{item.riskLevelName},
				#{item.riskLevelVal},
				#{item.riskLevelDesc},
				#{item.userRiskLevelName},
				#{item.userRiskLevelVal},
				#{item.userRiskLevelDesc},
				#{item.sort},
				#{item.deleteFlag},
				#{item.createTime}
		)
		</foreach>
		; END ;
	</insert>

	<delete id="delete" parameterType="String">
		delete from risk_level_config
		where uuid = #{uuid}
	</delete>
	
	<update id="deleteBatch">
		update risk_level_config set delete_flag = 1
		where uuid in
		<foreach collection="array" item="uuid" open="(" separator="," close=")">  
            #{uuid} 
        </foreach>		
	</update>

	<update id="deleteLogic" parameterType="String">
		update risk_level_config set delete_flag = 1 
		where uuid = #{uuid}
	</update>

	<update id="update" parameterType="com.rd.ifaes.core.risk.domain.LevelConfig">
		update risk_level_config 
		<trim prefix="set" suffixOverrides=",">
            <if test="riskLevelName != null and riskLevelName != ''">RISK_LEVEL_NAME = #{riskLevelName},</if>
			<if test="riskLevelVal != null">RISK_LEVEL_VAL = #{riskLevelVal},</if>
            <if test="riskLevelDesc != null and riskLevelDesc != ''">RISK_LEVEL_DESC = #{riskLevelDesc},</if>
            <if test="userRiskLevelName != null and userRiskLevelName != ''">USER_RISK_LEVEL_NAME = #{userRiskLevelName},</if>
			<if test="userRiskLevelVal != null">USER_RISK_LEVEL_VAL = #{userRiskLevelVal},</if>
            <if test="userRiskLevelDesc != null and userRiskLevelDesc != ''">USER_RISK_LEVEL_DESC = #{userRiskLevelDesc},</if>
			<if test="sort != null">SORT = #{sort},</if>
			<if test="deleteFlag != null">and DELETE_FLAG = #{deleteFlag},</if>
		</trim>
		<where>uuid = #{uuid}</where>
	</update>

    <select id="findAll" resultMap="levelConfigResultMap">
        select <include refid="table_columns" />
        from risk_level_config 
    </select>

    <select id="findList" resultMap="levelConfigResultMap">
        select <include refid="table_columns" />
        from risk_level_config
        <include refid="page_where" />
	</select>

    <select id="getCount" resultType="int" >
        select count(uuid) from risk_level_config
        <include refid="page_where" />
    </select>


    <select id="get" resultMap="levelConfigResultMap" parameterType="String" >
		select <include refid="table_columns" />
		from risk_level_config
		where uuid = #{uuid}
	</select>
	
	<!-- 其他自定义SQL -->
	<!-- 查询不包含这些uuids的对象组 -->
	<select id="findNoClude" resultMap="levelConfigResultMap">
		select <include refid="table_columns" />
		from risk_level_config where delete_flag = #{deleteFlag} and uuid not in 
		<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
		order by user_risk_level_val asc
	</select>
	
	<!-- 根据试卷ID查询试卷等级列表 -->
	<select id="findLevelListByPapersId" resultMap="levelConfigResultMap">
		select c.UUID,c.RISK_LEVEL_NO,c.RISK_LEVEL_NAME,c.RISK_LEVEL_VAL,c.RISK_LEVEL_DESC,c.USER_RISK_LEVEL_NAME,
		c.USER_RISK_LEVEL_VAL,c.USER_RISK_LEVEL_DESC,c.SORT,c.DELETE_FLAG,c.CREATE_TIME  
		from risk_level_config c left join risk_papers_score s on s.risk_id = c.uuid where
		c.delete_flag = #{deleteFlag}
		and s.papers_id = #{papersId} 
		order by c.user_risk_level_val asc
	</select>
	
	<!-- 查到以用户类型值 默认排序的列表 -->
	<select id="findLevelListByOrder" resultMap="levelConfigResultMap" parameterType="String">
		select <include refid="table_columns" />
		from risk_level_config where delete_flag = #{deleteFlag} order by user_risk_level_val asc
	</select>
	
	<select id="getMaxConfig" resultMap="levelConfigResultMap">
		SELECT * FROM (
			SELECT ROW_NUMBER() OVER(order by risk_level_val desc) RN, <include refid="table_columns" />
			from risk_level_config where delete_flag = 0  
		) WHERE RN = 1 
	</select>
	<!-- 判断风险等级是否重复存在 -->
	<select id="isExistsConfig" resultType="int" parameterType="Map">
	select count(uuid) from risk_level_config where risk_level_val =#{riskLevelVal} 
	       and delete_flag = 0 and uuid != #{uuid}
	</select>
</mapper>