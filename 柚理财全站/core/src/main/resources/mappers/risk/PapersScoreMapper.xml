<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rd.ifaes.core.risk.mapper.PapersScoreMapper">
	<resultMap type="com.rd.ifaes.core.risk.domain.PapersScore" id="papersScoreResultMap">
		<result property="uuid" column="UUID"/>
		<result property="papersId" column="PAPERS_ID"/>
		<result property="riskId" column="RISK_ID"/>
		<result property="startScore" column="START_SCORE"/>
		<result property="endScore" column="END_SCORE"/>
		<result property="createTime" column="CREATE_TIME"/>
	</resultMap>
	
	<sql id="table_columns">
		UUID,
		PAPERS_ID,
		RISK_ID,
		START_SCORE,
		END_SCORE,
		CREATE_TIME
    </sql>
	<sql id="entity_properties">
		#{uuid},
		#{papersId},
		#{riskId},
		#{startScore},
		#{endScore},
		#{createTime}
	</sql>

    <!-- 使用like用法：columnName like concat('%',#{columnName},'%') -->
    <sql id="page_where">
        <trim prefix="where" prefixOverrides="and | or ">
            <if test="uuid != null and uuid != ''">and UUID = #{uuid}</if>
            <if test="papersId != null and papersId != ''">and PAPERS_ID = #{papersId}</if>
            <if test="riskId != null and riskId != ''">and RISK_ID = #{riskId}</if>
			<if test="startScore != null">and START_SCORE = #{startScore}</if>
			<if test="endScore != null">and END_SCORE = #{endScore}</if>
			<if test="createTime != null">and CREATE_TIME = #{createTime}</if>
        </trim>
        <if test="page != null and page.sort!=null and page.sort!=''">
        	order by ${page.sort} ${page.order}
        </if>
        <!-- <if test="page == null or page.sort == null or page.sort == ''">order by sort </if> --> 
    </sql>

	<insert id="insert" parameterType="com.rd.ifaes.core.risk.domain.PapersScore">
		insert into risk_papers_score( <include refid="table_columns" /> ) 
		values ( <include refid="entity_properties" /> )
	</insert>
	
	<insert id="insertBatch" parameterType="java.util.List">		
		insert into risk_papers_score( <include refid="table_columns" /> ) 
		values 
		<foreach collection="list" item="item" index="index" separator=",">  
		( 
		#{item.uuid},
				#{item.papersId},
				#{item.riskId},
				#{item.startScore},
				#{item.endScore},
				#{item.createTime}
		)
		</foreach>
	</insert>

	<delete id="delete" parameterType="String">
		delete from risk_papers_score
		where uuid = #{uuid}
	</delete>
	
	<update id="deleteBatch">
		update risk_papers_score set delete_flag = 1
		where uuid in
		<foreach collection="array" item="uuid" open="(" separator="," close=")">  
            #{uuid} 
        </foreach>		
	</update>

	<update id="deleteLogic" parameterType="String">
		update risk_papers_score set delete_flag = 1 
		where uuid = #{uuid}
	</update>

	<update id="update" parameterType="com.rd.ifaes.core.risk.domain.PapersScore">
		update risk_papers_score 
		<trim prefix="set" suffixOverrides=",">
            <if test="papersId != null and papersId != ''">PAPERS_ID = #{papersId},</if>
            <if test="riskId != null and riskId != ''">RISK_ID = #{riskId},</if>
			<if test="startScore != null">START_SCORE = #{startScore},</if>
			<if test="endScore != null">END_SCORE = #{endScore},</if>
		</trim>
		<where>uuid = #{uuid}</where>
	</update>

	<!-- 批量更新 -->
	<update id="updateBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" open="" separator=";" close="">  
			update risk_papers_score 
			<trim prefix="set" suffixOverrides=",">
	            <if test="item.riskId != null and item.riskId != ''">RISK_ID = #{item.riskId},</if>
				<if test="item.startScore != null">START_SCORE = #{item.startScore},</if>
				<if test="item.endScore != null">END_SCORE = #{item.endScore},</if>
			</trim>
			<where>uuid = #{item.uuid}</where>
		</foreach>
	</update>
	
	
    <select id="findAll" resultMap="papersScoreResultMap">
        select <include refid="table_columns" />
        from risk_papers_score
    </select>

    <select id="findList" resultMap="papersScoreResultMap">
        select <include refid="table_columns" />
        from risk_papers_score
        <include refid="page_where" />
	</select>

    <select id="getCount" resultType="int" >
        select count(uuid) from risk_papers_score
        <include refid="page_where" />
    </select>


    <select id="get" resultMap="papersScoreResultMap" parameterType="String" >
		select <include refid="table_columns" />
		from risk_papers_score
		where uuid = #{uuid}
	</select>
	
	<!-- 其他自定义SQL -->
	<!-- 根据试卷ID查询等级设置    -->
	<select id="findPapersScoreByPapersId" resultMap="papersScoreResultMap" parameterType="String" >
		select s.uuid,s.papers_id,s.risk_id,s.start_score,s.end_score,s.create_time
		,p.papers_name as papersName,c.user_risk_level_name as userRiskName
		from risk_papers_score s left join risk_papers p  on s.papers_id = p.uuid
		left join risk_level_config c on c.uuid =s.risk_id 
		where s.papers_id = #{papersId}
		order by c.user_risk_level_val asc
	</select>
</mapper>